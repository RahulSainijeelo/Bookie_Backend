generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  email      String     @unique
  password   String
  name       String
  profilePic String?
  role       Role       @default(USER)
  addresses Address[]
  isActive   Boolean    @default(true)
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  cart       Cart?
  books      Book[]
  orders     Order[]
  reviews    Review[]
  favorites  Favorite[]

  @@map("users")
}

model Address {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  street     String
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Category {
  id    String @id @default(uuid())
  name  String @unique
  books Book[]
}

model Book {
  id          String      @id @default(uuid())
  title       String
  author      String
  description String?
  isApproved  Boolean     @default(false)
  price       Float
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  imageUrl    String?
  rating      Float       @default(0)
  reviews     Review[]
  sellerId    String
  stock       Int         @default(0)
  orderItems  OrderItem[]
  favorites   Favorite[]
  seller      User        @relation(fields: [sellerId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  CartItem    CartItem[]
}

model Order {
  id              String         @id @default(uuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id])
  items           OrderItem[]
  status          OrderStatus    @default(PENDING)
  shippingAddress String
  billingAddress  String?
  paymentMethod   String
  couponCode      String?
  totalAmount     Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  tracking        OrderTracking?
}

model OrderItem {
  id       String @id @default(uuid())
  orderId  String
  order    Order  @relation(fields: [orderId], references: [id])
  bookId   String
  book     Book   @relation(fields: [bookId], references: [id])
  quantity Int
  price    Float
}

model OrderTracking {
  id                String    @id @default(uuid())
  orderId           String    @unique
  order             Order     @relation(fields: [orderId], references: [id])
  status            String
  carrier           String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  lastUpdated       DateTime  @default(now())
}

model Coupon {
  id                 String   @id @default(uuid())
  code               String   @unique
  discountPercentage Float
  isActive           Boolean  @default(true)
  expiryDate         DateTime
  createdAt          DateTime @default(now())
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, bookId])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  bookId    String
  book      Book     @relation(fields: [bookId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  SELLER
  MODERATOR
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
